#!/bin/bash
set -euo pipefail
: "${username:=alan}"
: "${password:=demo}"
: "${baseurl:=}"
: "${prefix:=/groupware}"
: "${keycloak:=https://keycloak.opencloud.test}"
: "${realm:=openCloud}"
: "${client_id:=groupware}"
: "${opencloud_container:=opencloud_full-opencloud-1}"
: "${opencloud_local_port:=9200}"

# find out whether we have basic auth enabled
declare -a auth
container=

function contains() {
  local -n a=$1
  local needle=$2
  local e
  for e in "${a[@]}"; do
    [[ $e == $needle ]] && return 0
  done
  return 1
}


if [[ -n $(docker ps -q -f name="${opencloud_container}") ]]; then
  # opencloud container is running
  # does it include the groupware service?
  services_str=$(docker inspect "${opencloud_container}"|jq -r '.[].Config.Env[]|select(match("^OC_ADD_RUN_SERVICES="))|.[index("=")+1:]')
  declare -a services
  IFS=',' read -a services <<< "$services_str"
  if contains services 'groupware'; then
    # opencloud container is running with the groupware service
    container=1

    # does the container have basic auth enabled?
    basic_auth=$(docker inspect "${opencloud_container}"|jq -r '.[].Config.Env[]|select(match("^PROXY_ENABLE_BASIC_AUTH="))|.[index("=")+1:]')
    if [[ "${basic_auth}" == "true" ]]; then
      # yes, it does
      auth=("-A" "basic" "-a" "${username}:${password}")
    else
      # it doesn't => empty auth array, will trigger fetching an access token
      auth=()
    fi
  else
    # opencloud container is running but without the groupware service
    # => we are assuming it's running locally in an IDE on ${opencloud_local_port} instead
    baseurl="https://localhost:${opencloud_local_port}"
    # assuming it is with basic auth support
    auth=("-A" "basic" "-a" "${username}:${password}")
  fi
else
  # opencloud container is not running
  # => we are assuming it's running locally in an IDE on ${opencloud_local_port} instead
  baseurl="https://localhost:${opencloud_local_port}"
  # assuming it is with keycloak
  auth=()
fi

url="${baseurl}"
if [[ -z "${url}" ]]; then
  if [[ -n "${container}" ]]; then
    url="https://cloud.opencloud.test"
  else
    url="https://localhost:9200"
  fi
fi

declare -a args
for a in "$@"; do
  case "$a" in
    //*) args+=("${url}${prefix}${a#/}");;
    /*) args+=("${url}$a");;
    *) args+=("$a");;
  esac
done

if [[ ${#auth[@]} == 0 ]]; then
  token=$(curl --silent --insecure --fail -X POST "${keycloak}/realms/${realm}/protocol/openid-connect/token" -d username="${username}" -d password="${password}" -d grant_type=password -d client_id="${client_id}" -d scope=openid | jq -r '.access_token')
  auth=("-A" "bearer" "-a" "$token")
fi

traceId=$(echo $RANDOM | md5sum | head -c 16)

[[ -n "${HTTP-}" ]] && exec $HTTP --verify=no ${auth[@]} "${args[@]}" "Trace-Id:${traceId}"
type -p https &>/dev/null && exec https --verify=no ${auth[@]} "${args[@]}" "Trace-Id:${traceId}"
type -p xh &>/dev/null && exec xh --verify=no ${auth[@]} "${args[@]}" "Trace-Id:${traceId}"

echo "ERROR: must install httpie or xh" >&2
